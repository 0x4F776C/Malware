package main

import (
	"fmt"
	"io/ioutil"
	"os"
)

func main() {
	if len(os.Args) < 3 {
		fmt.Println("Usage: go run obfuscator.go <input_exe> <output_exe>")
		return
	}

	inputFile := os.Args[1]
	outputFile := os.Args[2]

	// Read the input executable
	inputBytes, err := ioutil.ReadFile(inputFile)
	if err != nil {
		fmt.Printf("Failed to read input file: %v\n", err)
		return
	}

	// XOR key
	key := byte(0xAA) // You can choose any byte value as the key

	// Obfuscate the input bytes
	obfuscatedBytes := xorBytes(inputBytes, key)

	// Write the obfuscated bytes to the output file
	err = ioutil.WriteFile(outputFile, obfuscatedBytes, 0644)
	if err != nil {
		fmt.Printf("Failed to write output file: %v\n", err)
		return
	}

	fmt.Println("Executable obfuscated successfully")
}

// xorBytes applies XOR operation to each byte of the input slice with the given key
func xorBytes(input []byte, key byte) []byte {
	output := make([]byte, len(input))
	for i, b := range input {
		output[i] = b ^ key
	}
	return output
}
